{"version":3,"file":"static/js/423.b3d1122f.chunk.js","mappings":"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","sources":["components/admin/Pagos.tsx"],"sourcesContent":["// src/components/Billing.tsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport '../../assets/css/Pagos.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\ninterface Payment {\r\n  date: string;\r\n  amount: number;\r\n  description: string;\r\n  name: string;\r\n  cedula: string;\r\n}\r\n\r\nconst Billing: React.FC = () => {\r\n  const [payments, setPayments] = useState<Payment[]>([]);\r\n  const [paymentData, setPaymentData] = useState({\r\n    date: '',\r\n    amount: 0,\r\n    description: '',\r\n    name: '',\r\n    cedula: '',\r\n  });\r\n\r\n  useEffect(() => {\r\n    const storedPayments = localStorage.getItem('payments');\r\n    if (storedPayments) {\r\n      setPayments(JSON.parse(storedPayments));\r\n    }\r\n  }, []);\r\n\r\n  const navigate = useNavigate(); // Move the useNavigate hook call inside the component body\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = e.target;\r\n    setPaymentData({ ...paymentData, [name]: value });\r\n  };\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n  \r\n    // Validar el formato de la fecha\r\n    const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\r\n    if (!dateRegex.test(paymentData.date)) {\r\n      alert('Fecha inválida. El formato debe ser YYYY-MM-DD');\r\n      return;\r\n    }\r\n  \r\n    // Validar el monto mínimo\r\n    if (paymentData.amount < 10) {\r\n      alert('El monto debe ser de al menos 10');\r\n      return;\r\n    }\r\n  \r\n    // Validar la longitud de la descripción\r\n    if (paymentData.description.length < 5 || paymentData.description.length > 20) {\r\n      alert('La descripción debe tener entre 5 y 20 caracteres');\r\n      return;\r\n    }\r\n  \r\n    // Validar la longitud del nombre\r\n    if (paymentData.name.length < 5 || paymentData.name.length > 15) {\r\n      alert('El nombre debe tener entre 5 y 15 caracteres');\r\n      return;\r\n    }\r\n  \r\n    // Validar la longitud de la cédula\r\n    if (paymentData.cedula.length !== 10) {\r\n      alert('La cédula debe tener 10 caracteres');\r\n      return;\r\n    }\r\n  \r\n    const updatedPayments = [...payments, paymentData];\r\n    setPayments(updatedPayments);\r\n    localStorage.setItem('payments', JSON.stringify(updatedPayments));\r\n    alert('Pago registrado con éxito');\r\n  };\r\n\r\n  return (\r\n    <div className=\"billing-container\">\r\n      <button className=\"back-button\" id=\"back-button\" onClick={() => navigate('/administracion')}>\r\n        <FontAwesomeIcon icon={faArrowLeft} />\r\n      </button>\r\n      <div className=\"pagos\">\r\n      <form className=\"billing-form\" onSubmit={handleSubmit}>\r\n        <h2>Registro de Pagos</h2>\r\n        <input\r\n          type=\"date\"\r\n          name=\"date\"\r\n          placeholder=\"Fecha\"\r\n          value={paymentData.date}\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n        <input\r\n          type=\"number\"\r\n          name=\"amount\"\r\n          placeholder=\"Monto\"\r\n          value={paymentData.amount}\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          name=\"description\"\r\n          placeholder=\"Descripción\"\r\n          value={paymentData.description}\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          placeholder=\"Nombre del paciente\"\r\n          value={paymentData.name}\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          name=\"cedula\"\r\n          placeholder=\"Cédula del paciente\"\r\n          value={paymentData.cedula}\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n\r\n        <button type=\"submit\">Registrar</button>\r\n      </form>\r\n      </div>\r\n      \r\n      <div className=\"payment-list\">\r\n        <h2>Historial de Pagos</h2>\r\n        {payments.map((payment, index) => (\r\n          <div key={index} className=\"payment-item\">\r\n            <p><strong>Fecha:</strong> {payment.date}</p>\r\n            <p><strong>Monto:</strong> ${payment.amount}</p>\r\n            <p><strong>Descripción:</strong> {payment.description}</p>\r\n            <p><strong>Nombre del paciente:</strong> {payment.name}</p>\r\n            <p><strong>Cédula del paciente:</strong> {payment.cedula}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Billing;\r\n"],"names":["Billing","payments","setPayments","useState","paymentData","setPaymentData","date","amount","description","name","cedula","useEffect","storedPayments","localStorage","getItem","JSON","parse","navigate","useNavigate","handleChange","e","value","target","_jsxs","className","children","_jsx","id","onClick","FontAwesomeIcon","icon","faArrowLeft","onSubmit","preventDefault","test","alert","length","updatedPayments","setItem","stringify","type","placeholder","onChange","required","map","payment","index"],"sourceRoot":""}