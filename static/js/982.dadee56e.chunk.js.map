{"version":3,"file":"static/js/982.dadee56e.chunk.js","mappings":"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","sources":["components/registro/Registro.tsx","utils/auth.ts"],"sourcesContent":["import React, { useState } from 'react';\r\nimport '../../assets/css/Registro.css';\r\nimport { saveUserToLocalStorage } from '../../utils/auth';\r\nimport { User } from '../../utils/users';\r\nimport Logo from '../../assets/image/LOGO-ULEAM-HORIZONTAL.png';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst Registro: React.FC = () => {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [cedula, setCedula] = useState('');\r\n  const [fechaNacimiento, setFechaNacimiento] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [correo, setCorreo] = useState('');\r\n  const [nombre, setNombre] = useState('');\r\n  const [apellido, setApellido] = useState('');\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleRegister = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (password !== confirmPassword) {\r\n      setError('Las contraseñas no coinciden');\r\n    } else if (!validateUsername(username)) {\r\n      setError('El nombre de usuario debe tener al menos 4 caracteres');\r\n    } else if (!validatePassword(password)) {\r\n      setError('La contraseña debe tener al menos 6 caracteres');\r\n    } else if (!validateCedula(cedula)) {\r\n      setError('La cédula debe tener 10 dígitos');\r\n    } else if (!validateFechaNacimiento(fechaNacimiento)) {\r\n      setError('La fecha de nacimiento no es válida');\r\n    } else if (!validateCorreo(correo)) {\r\n      setError('El correo electrónico no es válido');\r\n    } else if (!validateNombre(nombre)) {\r\n      setError('El nombre no puede estar vacío');\r\n    } else if (!validateApellido(apellido)) {\r\n      setError('El apellido no puede estar vacío');\r\n    } else {\r\n      const newUser: User = {\r\n        username,\r\n        password,\r\n        cedula,\r\n        fechaNacimiento,\r\n        correo,\r\n        nombre,\r\n        apellido,\r\n      };\r\n      saveUserToLocalStorage(newUser); // Guardar nuevo usuario en localStorage\r\n      setUsername('');\r\n      setPassword('');\r\n      setConfirmPassword('');\r\n      setCedula('');\r\n      setFechaNacimiento('');\r\n      setCorreo('');\r\n      setError('');\r\n      setApellido('');\r\n      setNombre('');\r\n      alert('Usuario registrado con éxito');\r\n    }\r\n  };\r\n\r\n  const validateUsername = (username: string) => {\r\n    return username.length >= 4 && username.length <= 10;\r\n  };\r\n\r\n  const validatePassword = (password: string) => {\r\n    return password.length >= 6;\r\n  };\r\n\r\n  const validateCedula = (cedula: string) => {\r\n    return cedula.length === 10;\r\n  };\r\n\r\n  const validateFechaNacimiento = (fechaNacimiento: string) => {\r\n    // You can add your own validation logic here\r\n    const currentDate = new Date();\r\n    const selectedDate = new Date(fechaNacimiento);\r\n    \r\n    return selectedDate <= currentDate;\r\n  };\r\n\r\n  const validateCorreo = (correo: string) => {\r\n    // You can add your own validation logic here\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(correo);\r\n  };\r\n\r\n  const validateNombre = (nombre: string) => {\r\n    const nombreRegex = /^[a-zA-ZáéíóúÁÉÍÓÚ\\s]+$/;\r\n    return nombreRegex.test(nombre.trim()) && nombre.trim().length >= 2 && nombre.trim().length <= 20;\r\n  };\r\n\r\n  const validateApellido = (apellido: string) => {\r\n    const apellidoRegex = /^[a-zA-ZáéíóúÁÉÍÓÚ\\s]+$/;\r\n    return apellidoRegex.test(apellido.trim()) && apellido.trim().length >= 2 && apellido.trim().length <= 20;\r\n  };\r\n\r\n  return (\r\n    <div className=\"register-container\">\r\n      <button className=\"back-button\" id=\"back-button\" onClick={() => navigate('/login')}>\r\n        <FontAwesomeIcon icon={faArrowLeft} />\r\n      </button>\r\n      <form className=\"register-form\" onSubmit={handleRegister}>\r\n        <img src={Logo} alt=\"Logo ULEAM\" className=\"Logo\" />\r\n        <h2>Registro</h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Nombre de usuario\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Nombre\"\r\n          value={nombre}\r\n          onChange={(e) => setNombre(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Apellido\"\r\n          value={apellido}\r\n          onChange={(e) => setApellido(e.target.value)}\r\n          required\r\n        />\r\n\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"Contraseña\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"Confirmar Contraseña\"\r\n          value={confirmPassword}\r\n          onChange={(e) => setConfirmPassword(e.target.value)}\r\n          required\r\n        />\r\n\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Cedula\"\r\n          value={cedula}\r\n          onChange={(e) => setCedula(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"date\"\r\n          placeholder=\"Fecha de nacimiento\"\r\n          value={fechaNacimiento}\r\n          onChange={(e) => setFechaNacimiento(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"email\"\r\n          placeholder=\"Correo\"\r\n          value={correo}\r\n          onChange={(e) => setCorreo(e.target.value)}\r\n          required\r\n        />\r\n        {error && <p className=\"error\">{error}</p>}\r\n        <button type=\"submit\">Registrar</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Registro;\r\n","// ../../utils/auth.ts\r\nimport { User } from '../utils/users';\r\n\r\nconst USERS_KEY = 'users';\r\nconst LOGGED_IN_USER_KEY = 'loggedInUser';\r\n\r\nexport const saveUserToLocalStorage = (user: User) => {\r\n  const users = JSON.parse(localStorage.getItem(USERS_KEY) || '[]');\r\n  users.push(user);\r\n  localStorage.setItem(USERS_KEY, JSON.stringify(users));\r\n};\r\n\r\nexport const getUsersFromLocalStorage = (): User[] => {\r\n  return JSON.parse(localStorage.getItem(USERS_KEY) || '[]');\r\n};\r\n\r\nexport const deleteUserFromLocalStorage = (username: string) => {\r\n  const users = JSON.parse(localStorage.getItem(USERS_KEY) || '[]');\r\n  const updatedUsers = users.filter((user: User) => user.username !== username);\r\n  localStorage.setItem(USERS_KEY, JSON.stringify(updatedUsers));\r\n};\r\n\r\nexport const authenticateUser = (username: string, password: string): boolean => {\r\n  const users = getUsersFromLocalStorage();\r\n  const user = users.find(u => u.username === username && u.password === password);\r\n  if (user) {\r\n    localStorage.setItem(LOGGED_IN_USER_KEY, JSON.stringify(user));\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const getLoggedInUser = (): User | null => {\r\n  const user = localStorage.getItem(LOGGED_IN_USER_KEY);\r\n  return user ? JSON.parse(user) : null;\r\n};\r\n\r\nexport const updateUserInLocalStorage = (updatedUser: User) => {\r\n  const users = JSON.parse(localStorage.getItem(USERS_KEY) || '[]');\r\n  const updatedUsers: User[] = users.map((user: User) =>\r\n    user.username === updatedUser.username ? updatedUser : user\r\n  );\r\n  localStorage.setItem(USERS_KEY, JSON.stringify(updatedUsers));\r\n\r\n  // También actualizar el usuario actualmente autenticado\r\n  localStorage.setItem(LOGGED_IN_USER_KEY, JSON.stringify(updatedUser));\r\n};\r\n"],"names":["Registro","username","setUsername","useState","password","setPassword","confirmPassword","setConfirmPassword","cedula","setCedula","fechaNacimiento","setFechaNacimiento","error","setError","correo","setCorreo","nombre","setNombre","apellido","setApellido","navigate","useNavigate","validateUsername","length","validatePassword","validateCedula","validateFechaNacimiento","currentDate","Date","validateCorreo","test","validateNombre","trim","validateApellido","_jsxs","className","children","_jsx","id","onClick","FontAwesomeIcon","icon","faArrowLeft","onSubmit","e","preventDefault","newUser","saveUserToLocalStorage","alert","src","Logo","alt","type","placeholder","value","onChange","target","required","USERS_KEY","LOGGED_IN_USER_KEY","user","users","JSON","parse","localStorage","getItem","push","setItem","stringify","getUsersFromLocalStorage","deleteUserFromLocalStorage","updatedUsers","filter","authenticateUser","find","u","getLoggedInUser","updateUserInLocalStorage","updatedUser","map"],"sourceRoot":""}